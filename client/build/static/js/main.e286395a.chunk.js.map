{"version":3,"sources":["components/Header.js","TransactionReducer.js","TransactionState.js","utils/format.js","components/Balance.js","components/AccountSummary.js","components/Transaction.js","components/TransactionHistory.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","loading","transactions","payload","filter","transaction","_id","error","initialState","TransactionContext","createContext","TransactionProvider","children","useReducer","TransactionReducer","dispatch","a","axios","get","res","data","response","id","delete","config","headers","post","Provider","value","getTransactions","delTransaction","addTransaction","numberWithCommas","x","toString","replace","Balance","balance","useContext","map","transactionAmount","reduce","acc","item","toFixed","AccountSummary","transactionAmounts","income","Math","abs","expense","className","Transaction","sign","transactionType","description","onClick","TransactionHistory","useEffect","key","AddTransaction","useState","setDescription","setTransactionAmount","onSubmit","e","preventDefault","newTransaction","Date","getTime","htmlFor","placeholder","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e286395a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <h1>\r\n        Expense Tracker\r\n    </h1>\r\n  );\r\n}\r\n","export default (state, action) => {\r\n    switch (action.type) {\r\n        case 'GET_TRANSACTIONS':\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                transactions: action.payload\r\n            }\r\n        case 'DELETE_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions: state.transactions.filter(transaction => transaction._id !== action.payload)\r\n            }\r\n        case 'ADD_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions: [...state.transactions, action.payload]\r\n            }\r\n        case 'TRANSACTION_ERROR':\r\n            return {\r\n            ...state,\r\n            error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { createContext, useReducer } from 'react'\r\nimport TransactionReducer from './TransactionReducer'\r\nimport axios from 'axios';\r\n\r\n// Create the initial state\r\n\r\n/* const initialState = {\r\n    transactions: [\r\n        {id:1, description: \"Income 1\", transactionAmount: 1000},\r\n        {id:2, description: \"Expense 1\", transactionAmount: -100},\r\n        {id:3, description: \"Income 2\", transactionAmount: 2000},\r\n        {id:4, description: \"Expense 2\", transactionAmount: -500}\r\n    ]\r\n}\r\n*/\r\n\r\nconst initialState = {\r\n    transactions: [],\r\n    error: null,\r\n    loading: true\r\n}\r\n\r\n// Create the transaction context\r\n\r\nexport const TransactionContext = createContext(initialState)\r\n\r\n// Create a provider for the Transaction Context\r\n\r\nexport const TransactionProvider = ({children}) => {\r\n\r\n    const [state, dispatch] = useReducer(TransactionReducer, initialState);\r\n\r\n    // Actions for transactions\r\n    async function getTransactions() {\r\n        try {\r\n            const res = await axios.get('api/v1/transactions');\r\n\r\n            dispatch({\r\n                type: 'GET_TRANSACTIONS',\r\n                payload: res.data.data\r\n            });\r\n        } catch (err) {\r\n            dispatch({\r\n                type: 'TRANSACTION_ERROR',\r\n                payload: err.response.data.error\r\n            });\r\n        }\r\n    }\r\n\r\n    async function delTransaction(id) {\r\n        try {\r\n            await axios.delete(`/api/v1/transactions/${id}`);\r\n            dispatch({\r\n                type:'DELETE_TRANSACTION',\r\n                payload:id\r\n            });\r\n        } catch (err) {\r\n            dispatch({\r\n                type: 'TRANSACTION_ERROR',\r\n                payload: err.response.data.error\r\n            });     \r\n        }        \r\n    }\r\n\r\n    async function addTransaction(transaction) {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        try {\r\n            const res = await axios.post('/api/v1/transactions', transaction, config);\r\n\r\n            dispatch({\r\n                type:'ADD_TRANSACTION',\r\n                payload:res.data.data\r\n            })\r\n        } catch (err) {\r\n            dispatch({\r\n                type: 'TRANSACTION_ERROR',\r\n                payload: err.response.data.error\r\n            });     \r\n        }  \r\n    }\r\n\r\n    return (\r\n        <TransactionContext.Provider value={\r\n            {\r\n                transactions: state.transactions,\r\n                error: state.error,\r\n                loading: state.loading,\r\n                getTransactions,\r\n                delTransaction,\r\n                addTransaction\r\n            }\r\n        }>\r\n            {children}\r\n        </TransactionContext.Provider>\r\n    )\r\n}","export function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}","import React, { useContext } from 'react';\r\nimport { TransactionContext } from '../TransactionState';\r\nimport {numberWithCommas} from '../utils/format';\r\n\r\nexport const Balance = () => {\r\n\r\n  const { transactions } = useContext(TransactionContext);\r\n  const transactionAmounts = transactions.map( transaction => transaction.transactionAmount);\r\n  const balance = transactionAmounts.reduce( (acc, item) => acc+=item, 0).toFixed(2);\r\n\r\n  return (\r\n    <div>\r\n        <h4>Current Balance</h4>\r\n  <h1>${numberWithCommas(balance)}</h1>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\n\r\nimport { TransactionContext } from '../TransactionState'\r\nimport {numberWithCommas} from '../utils/format';\r\n\r\nexport const AccountSummary = () => {\r\n\r\n  const { transactions } = useContext(TransactionContext);\r\n  const transactionAmounts = transactions.map(transaction => transaction.transactionAmount);\r\n\r\n    const income = Math.abs(transactionAmounts\r\n    .filter(transaction => transaction > 0)\r\n    .reduce((acc, transaction) => (acc+=transaction), 0)\r\n    .toFixed(2));\r\n\r\n    const expense = Math.abs(transactionAmounts\r\n    .filter(transaction => transaction < 0)\r\n    .reduce((acc, transaction) => (acc+=transaction), 0)\r\n    .toFixed(2));\r\n  \r\n  return (\r\n    <div className=\"inc-exp-container\">\r\n        <div>\r\n            <h4>Income </h4>\r\n            <p className=\"money plus\">${numberWithCommas(income)}</p>\r\n        </div>\r\n        <div>\r\n            <h4>Expense </h4>\r\n            <p className=\"money minus\">${numberWithCommas(expense)}</p>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, {useContext} from 'react';\r\nimport { TransactionContext } from '../TransactionState';\r\nimport {numberWithCommas} from '../utils/format';\r\n\r\nexport const Transaction = ({transaction}) => {\r\n\r\n  const { delTransaction } = useContext(TransactionContext);\r\n\r\n  const sign= transaction.transactionAmount > 0 ? '+' : '-';\r\n  const transactionType= transaction.transactionAmount > 0 ? 'plus' : 'minus';\r\n\r\n  return (\r\n    <li className={transactionType}>\r\n    {transaction.description}\r\n  <span>{sign}${numberWithCommas(Math.abs(transaction.transactionAmount))}</span>\r\n    <button className=\"delete-btn\"\r\n            onClick={()=> delTransaction(transaction._id)}\r\n    >X\r\n    </button>\r\n    </li>\r\n  );\r\n}\r\n","import React , {useContext, useEffect} from 'react';\r\nimport {TransactionContext} from '../TransactionState';\r\nimport { Transaction } from './Transaction'\r\n\r\nexport const TransactionHistory = () => {\r\n\r\n  const { transactions, getTransactions } = useContext(TransactionContext);\r\n\r\n  useEffect(()=> {\r\n    getTransactions();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, []);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h3>Transaction History </h3>\r\n      <ul className=\"list\">\r\n        {transactions.map(transaction => <Transaction key={transaction.id} transaction={transaction}/>)\r\n        }\r\n      </ul>\r\n  </div>\r\n  );\r\n}\r\n","import React, { useState, useContext } from 'react';\r\nimport { TransactionContext } from '../TransactionState';\r\n\r\nexport const AddTransaction = () => {\r\n\r\nconst [description, setDescription] = useState('');\r\nconst  [transactionAmount, setTransactionAmount] = useState(0);\r\n\r\nconst { addTransaction } = useContext(TransactionContext);\r\n\r\nconst onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newTransaction = {\r\n        id: new Date().getTime(),\r\n        description,\r\n        transactionAmount: +transactionAmount\r\n    }\r\n\r\n    addTransaction(newTransaction);\r\n}\r\n\r\nreturn (\r\n<div>\r\n    <h3>Add Transaction</h3>\r\n    <form onSubmit={onSubmit} >\r\n        <div className=\"form-control\">\r\n            <label htmlFor=\"description\">\r\n                Description\r\n            </label>\r\n            <input  type=\"text\"\r\n                    id=\"description\"\r\n                    placeholder=\"Detail of Transaction\"\r\n                    value={description}\r\n                    onChange={(e)=> setDescription(e.target.value)}>\r\n            </input>\r\n        </div>\r\n        <div className=\"form-control\">\r\n            <label htmlFor=\"transactionamount\">\r\n                Transaction Amount\r\n            </label>\r\n            <input  type=\"text\"\r\n                    id=\"transactionamount\"\r\n                    placeholder=\"Enter transaction amount\"\r\n                    value={transactionAmount}\r\n                    onChange={(e)=> setTransactionAmount(e.target.value)}>\r\n            </input>\r\n        </div>\r\n        <button className=\"btn\" >\r\n            Add Transaction\r\n        </button>            \r\n    </form>\r\n</div>\r\n);\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Header } from './components/Header'\nimport { Balance } from './components/Balance'\nimport { AccountSummary } from './components/AccountSummary';\nimport { TransactionHistory } from './components/TransactionHistory';\nimport { AddTransaction } from './components/AddTransaction';\nimport { TransactionProvider } from './TransactionState';\n\nfunction App() {\n  return (\n    <TransactionProvider >\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <AccountSummary />\n        <TransactionHistory />\n        <AddTransaction />\n      </div>\n    </TransactionProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}